import boto3
import json
import time
import os

import logging

def cve_by_id(event, context):
    # Set up logging
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # Extract the year from the path parameters
    cveid = event['pathParameters']['cveid']
    year = cveid.split('-')[1]
    # Extract the cvegroup from the cveid - it is the first two digits of the second number
    cvegroup = cveid.split('-')[2][0:2]

    # Create a client for the Athena service
    client = boto3.client('athena')

    query = f"""
        SELECT 
            datepublished,
            dateupdated,
            cveid,
            affected,
            references,
            problemtypes,
            providerordid,
            providershortname,
            descriptions
        FROM 
            by_year_and_cve 
        WHERE 
            year = '{year}'
            and cve_group = '{cvegroup}'
            AND cveid = '{cveid}'
        ORDER BY
            datepublished DESC
    """

    print(f"Executing query: {query}")

    # Execute the SQL query
    response = client.start_query_execution(
        QueryString=query,
        QueryExecutionContext={
            'Database': 'cvedb',
            'Catalog': 'AwsDataCatalog'
        },
        WorkGroup='CVEDBAPI',
        # ResultConfiguration={
        #     'OutputLocation': f"s3://{os.environ['ATHENA_OUTPUT_BUCKET']}/cve_by_id/"
        # }
    )


    # Get the query execution ID
    query_execution_id = response['QueryExecutionId']

    # Wait for the query to complete
    while True:
        response = client.get_query_execution(QueryExecutionId=query_execution_id)

        if response['QueryExecution']['Status']['State'] in ('SUCCEEDED', 'FAILED', 'CANCELLED'):
            break

        time.sleep(0.2)
    
    # If the query execution state is failed, log the failure message and reason
    if response['QueryExecution']['Status']['State'] == 'FAILED':
        logger.info('Query execution failed.')
        logger.info('Failure reason: %s', response['QueryExecution']['Status']['StateChangeReason'])

    # Fetch the results
    results = client.get_query_results(QueryExecutionId=query_execution_id)

    returnItems = []
    columnInfo = results['ResultSet']['ResultSetMetadata']['ColumnInfo']

    for index, row in enumerate(results['ResultSet']['Rows']):
        if index == 0:
            continue

        item = {}
        for columnIndex, column in enumerate(columnInfo):
            item[column['Name']] = row['Data'][columnIndex]['VarCharValue'] if 'VarCharValue' in row['Data'][columnIndex] else ""

        returnItems.append(item)

    # map the results from a list of dictionaries to a single dictionary
    # with the following fields:
    # datepublished,
    # dateupdated,
    # cveid,
    # affected,
    # references,
    # problemtypes,
    # providerordid,
    # providershortname,
    # descriptions
    # the resulting data looks like:
    # {"UpdateCount": 0, "ResultSet": {
    # "Rows": [
    #     {"Data": [{"VarCharValue": "datepublished"}, {"VarCharValue": "dateupdated"}, {"VarCharValue": "cveid"}, {"VarCharValue": "affected"}, {"VarCharValue": "references"}, {"VarCharValue": "problemtypes"}, {"VarCharValue": "providerordid"}, {"VarCharValue": "providershortname"}, {"VarCharValue": "descriptions"}]}, 
    #     {"Data": [{"VarCharValue": "2024-04-17T07:46:12.358Z"}, {"VarCharValue": "2024-04-17T07:46:12.358Z"}, {"VarCharValue": "CVE-2024-3846"}, {"VarCharValue": "Google:Chrome:[{'version': '124.0.6367.60', 'status': 'affected', 'lessThan': '124.0.6367.60', 'versionType': 'custom'}]"}, {"VarCharValue": "https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop_16.html,https://issues.chromium.org/issues/40064754"}, {"VarCharValue": "Inappropriate implementation"}, {"VarCharValue": "ebfee0ef-53dd-4cf3-9e2a-08a5bd7a7e28"}, {"VarCharValue": "Chrome"}, {"VarCharValue": "Inappropriate implementation in Prompts in Google Chrome prior to 124.0.6367.60 allowed a remote attacker who convinced a user to engage in specific UI gestures to perform UI spoofing via a crafted HTML page. (Chromium security severity: Low)"}]}
    # ], 
    # "ResultSetMetadata": {
    #     "ColumnInfo": [
    #         {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "datepublished", "Label": "datepublished", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "dateupdated", "Label": "dateupdated", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "cveid", "Label": "cveid", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "affected", "Label": "affected", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "references", "Label": "references", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "problemtypes", "Label": "problemtypes", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "providerordid", "Label": "providerordid", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "providershortname", "Label": "providershortname", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "descriptions", "Label": "descriptions", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}]}}, "ResponseMetadata": {"RequestId": "437c699f-55a9-4deb-be9e-e0869b809d2a", "HTTPStatusCode": 200, "HTTPHeaders": {"date": "Sun, 21 Apr 2024 10:13:06 GMT", "content-type": "application/x-amz-json-1.1", "content-length": "2922", "connection": "keep-alive", "x-amzn-requestid": "437c699f-55a9-4deb-be9e-e0869b809d2a"}, "RetryAttempts": 0}}%   
    # results = results['ResultSet']['Rows'][1:]


    # Return the results as a JSON string
    return {
        'statusCode': 200,
        'body': json.dumps(returnItems, default=str)
    }

def map_test(event, context):
    results = json.loads('{"UpdateCount": 0, "ResultSet": {"Rows": [{"Data": [{"VarCharValue": "datepublished"}, {"VarCharValue": "dateupdated"}, {"VarCharValue": "cveid"}, {"VarCharValue": "affected"}, {"VarCharValue": "references"}, {"VarCharValue": "problemtypes"}, {"VarCharValue": "providerordid"}, {"VarCharValue": "providershortname"}, {"VarCharValue": "descriptions"}]}, {"Data": [{"VarCharValue": "2024-04-17T07:46:12.358Z"}, {"VarCharValue": "2024-04-17T07:46:12.358Z"}, {"VarCharValue": "CVE-2024-3846"}, {"VarCharValue": "Google:Chrome:[{\'version\': \'124.0.6367.60\', \'status\': \'affected\', \'lessThan\': \'124.0.6367.60\', \'versionType\': \'custom\'}]"}, {"VarCharValue": "https://chromereleases.googleblog.com/2024/04/stable-channel-update-for-desktop_16.html,https://issues.chromium.org/issues/40064754"}, {"VarCharValue": "Inappropriate implementation"}, {"VarCharValue": "ebfee0ef-53dd-4cf3-9e2a-08a5bd7a7e28"}, {"VarCharValue": "Chrome"}, {"VarCharValue": "Inappropriate implementation in Prompts in Google Chrome prior to 124.0.6367.60 allowed a remote attacker who convinced a user to engage in specific UI gestures to perform UI spoofing via a crafted HTML page. (Chromium security severity: Low)"}]}], "ResultSetMetadata": {"ColumnInfo": [{"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "datepublished", "Label": "datepublished", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "dateupdated", "Label": "dateupdated", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "cveid", "Label": "cveid", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "affected", "Label": "affected", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "references", "Label": "references", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "problemtypes", "Label": "problemtypes", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "providerordid", "Label": "providerordid", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "providershortname", "Label": "providershortname", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}, {"CatalogName": "hive", "SchemaName": "", "TableName": "", "Name": "descriptions", "Label": "descriptions", "Type": "varchar", "Precision": 2147483647, "Scale": 0, "Nullable": "UNKNOWN", "CaseSensitive": true}]}}, "ResponseMetadata": {"RequestId": "437c699f-55a9-4deb-be9e-e0869b809d2a", "HTTPStatusCode": 200, "HTTPHeaders": {"date": "Sun, 21 Apr 2024 10:13:06 GMT", "content-type": "application/x-amz-json-1.1", "content-length": "2922", "connection": "keep-alive", "x-amzn-requestid": "437c699f-55a9-4deb-be9e-e0869b809d2a"}, "RetryAttempts": 0}}')

    print(json.dumps(results))

    returnItems = []
    columnInfo = results['ResultSet']['ResultSetMetadata']['ColumnInfo']

    for index, row in enumerate(results['ResultSet']['Rows']):
        if index == 0:
            continue

        item = {}
        for columnIndex, column in enumerate(columnInfo):
            item[column['Name']] = row['Data'][columnIndex]['VarCharValue'] if 'VarCharValue' in row['Data'][columnIndex] else ""

        returnItems.append(item)

    print(json.dumps(returnItems))

if __name__ == "__main__":
    map_test(None, None)
